#!/bin/bash

set -euo pipefail

function log {
  echo >&2 "[smart-pull]" "$@"
}

function err {
  echo >&2 "[smart-pull]" "$@"
}

set +e
if [ "$(tput colors 2>/dev/null)" -ge 8 ]; then
  function log {
    printf >&2 "\033[90m"
    echo   >&2 "[smart-pull]" "$@"
    printf >&2 "\033[0m"
  }

  function err {
    printf >&2 "\033[31m"
    echo   >&2 "[smart-pull]" "$@"
    printf >&2 "\033[0m"
  }
fi
set -e

if [ -n "${2:-}" ]; then
  err "Upstream argument not supported. It is always 'origin'."
  exit 1
fi

args=()
if [ -n "${1:-}" ]; then
  args+=("origin")
  args+=("$1")
fi

log "Attempting fast-forward pull."
set +e
git pull --ff-only ${args[@]+"${args[@]}"} 2>/dev/null
res=$?
set -e

if [ $res -eq 0 ]; then
  log "Fast-forward pull succeeded."
  exit 0
elif [ $res -ne 128 ]; then
  err "git pull exited with unexpected status $res"
  err "Re-running it so you can see the output:"
  git pull --ff-only ${args[@]+"${args[@]}"}
fi

log "Fast-forward pull failed."
log "Checking if we can rebase without conflict."
if ! git diff --quiet --ignore-submodules || ! git diff --staged --quiet; then
  err "Dirty working tree or index. Aborting."
  exit 2
fi
upstream_branch="$(git rev-parse --abbrev-ref "@{u}")"
git branch -D _git-smart-pull --quiet 2>/dev/null || true
git checkout -b _git-smart-pull --quiet
git branch --set-upstream-to "$upstream_branch" --quiet
set +e
git pull --rebase=true ${args[@]+"${args[@]}"} >/dev/null 2>/dev/null
rebase_ok=$?
set -e
if [ $rebase_ok -eq 0 ]; then
  log "Can rebase without conflict."
  log "Will pull with rebase."
  git checkout -
  git branch -D _git-smart-pull --quiet 2>/dev/null || true
  git pull --rebase=true ${args[@]+"${args[@]}"}
else
  log "Cannot rebase without conflict. Conflicted files:"
  ( 
    IFS=$'\n'
    for f in $(git diff --name-only --diff-filter=U --relative); do
      log "$f"
    done
  )
  git rebase --abort
  git checkout - --quiet
  git branch -D _git-smart-pull --quiet 2>/dev/null || true
  while true; do
    read -r -p "Select pull method: [m]erge / [r]ebase / [q]uit " res
    case $res in
      m)
        exec git pull --rebase=no ${args[@]+"${args[@]}"}
        break
        ;;
      r)
        git fetch -a
        if [ -n "${1:-}" ]; then
          rebase_branch="origin/$1"
      else
          rebase_branch="$upstream_branch"
      fi
        exec git smart-rebase "$rebase_branch"
        break
        ;;
      q)
        exit 1
        ;;
      *) ;;
    esac
  done
fi
